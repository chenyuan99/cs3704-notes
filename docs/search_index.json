[
["index.html", "CS3704 Notes Chapter 1 Index 1.1 CS3704: Intermediate Software Design and Engineering", " CS3704 Notes Yuan Chen 2020-03-25 Chapter 1 Index 1.1 CS3704: Intermediate Software Design and Engineering Explores the principles of software design in detail, with an emphasis on software engineering aspects. Includes exposure of software lifecycle activities including design, coding, testing, debugging, and maintenance, highlighting how design affects these activities. Peer reviews, designing for software reuse, CASE tools, and writing software to specifications are also covered. (3H,3C) 1.1.1 Prerequisites A grade of C or better required in CS 3114. 1.1.2 Note CS majors must achieve a grade of C or better in CS 2104 before attempting CS 3704 1.1.3 Taught By Osman Balci Francisco Servant Na Meng Eli Tilevich "],
["intro.html", "Chapter 2 Introduction 2.1 CS3704: Intermediate Software Design and Engineering", " Chapter 2 Introduction 2.1 CS3704: Intermediate Software Design and Engineering Explores the principles of software design in detail, with an emphasis on software engineering aspects. Includes exposure of software lifecycle activities including design, coding, testing, debugging, and maintenance, highlighting how design affects these activities. Peer reviews, designing for software reuse, CASE tools, and writing software to specifications are also covered. (3H,3C) 2.1.1 Prerequisites A grade of C or better required in CS 3114. 2.1.2 Note CS majors must achieve a grade of C or better in CS 2104 before attempting CS 3704 2.1.3 Taught By Osman Balci Francisco Servant Na Meng Eli Tilevich "],
["literature.html", "Chapter 3 Literature", " Chapter 3 Literature Here is a review of existing methods. "],
["methods.html", "Chapter 4 Methods", " Chapter 4 Methods We describe our methods in this chapter. "],
["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["multiple-linear-regression.html", "Chapter 6 02/27/2020 Multiple Linear Regression 6.1 Model Selection", " Chapter 6 02/27/2020 Multiple Linear Regression We have finished a nice book. 6.1 Model Selection How many 6.1.1 Advertising data "],
["detailed-design.html", "Chapter 7 Detailed Design", " Chapter 7 Detailed Design Overview What is detailed design? What is OO design? How should we do OO design? Detailed design To decompose subsystems into modules Two approaches of decomposition Procedual System is decompose Object-oriented Abstraction To focus on important, inherent properties while suppressing unnecessary details Permits separation of concern Allows postponements Two abstraction mechanisms Procedural abstraction Specification describes input/output Implementation describes algorithm Data abstraction Specification describes attributes, values Implementation describes representation and manipulation OOD To identify responsibilities and assign them to classes and objects Responsibility for doing E.g., create an object, perform calculations, invoking operations on other objects Responsibilities for knowing E.g., attributes, data involved in calculations, parameters when invoking operations How Do developers Design Objects? Code Draw, then code UML Diagrams Only draw The tool generates everything from diagrams How much time spent drawing UML before coding? Spend a few hours or at most one day (with partners) near Draw uml for the hard, creative parts of the detailed object design Stop and transition to coding UML drawings Inspiration as a starting point The final design in code may diverge and improve Detailed design resultes Dynamic models Help design the logic/behavior of the code UML interaction diagrams Static models Help design the definition of packages, class names, attributes, and method signatures (detailed) UML class diagrams UML Interaction Diagrams To illustrate how objects interact via messages Two types of interaction diagrams Communication diagram Sequence diagram Illustrate interactions in akind of fence format, in which each new object is added How should we do OO Design Responsibility-driven Responsibilities Obligations/behaviors Doing Responsibiliities Doing something itself Guideline The transition of responsibilities into classes and methods is influenced by the gra Knowing responsibilities Knowing about private encapsulated data Knowing related objects Knowing about things it can derive of calcualate “a sale of ject” Guideline The attributes and associations illuatrats=ed by domain objects GRASP: Principles Creator(doing) Problem: who creates an A? Advice: Assign class B the responsibility to create an instance of class A if: B “contains” or compositely aggregates A Whole-part; assembly Information expert Low coupling Controller High cohesion Sequence vs communication Summary Object fullfill tasks using their info or the info of objects the "],
["references.html", "References", " References "]
]
